local grid = require("main._scripts.modules.road_quadrants")
local upgrades = require("main._scripts.modules.upgrades_module")
local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")

local MAX_SPEED_X = 800
local ACCELERATION_X = 1500
local DECELERATION_X = 1500

local function apply_upgrade()
	-- local biggerMagUpgrade = upgrades.get_upgrade_value("player", "bigger_mag")
	-- items.gun1.maxMagSize = 30 + biggerMagUpgrade
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.curQuad = 0
	-- TODO: get the level managers to get the width and height of the level i guess to uh make player not go out of bounds
	
	self.moving = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed_y = 600
	self.speed_x = 0 
	self.last_dir_x = 0

	particlefx.play("particleFX#smoke2")
	-- particlefx.play("particleFX#tire_marks")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- local pos = go.get_position()
	-- local width = window.get_size()
	-- local height = window.get_size()
	-- if pos.x < 200 then
	-- 	pos.x = 200
	-- elseif pos.x > width then
	-- 	pos.x = width
	-- end
	-- if pos.y < 0 then
	-- 	pos.y = 0
	-- elseif pos.y > height then
	-- 	pos.y = height
	-- end
	-- go.set_position(pos)
end

function fixed_update(self, dt)
	-- prevent player from going out of bounds
	local pos = go.get_position()
	local updatedQuad = grid.get_quadrant(pos)

	if self.curQuad ~= updatedQuad then
		grid.set_occupied(self.curQuad, false)
		self.curQuad = updatedQuad
		grid.set_occupied(self.curQuad, true)
	end

	if self.moving then
		if self.input.x ~= 0 then
			-- If the player is changing direction, decelerate first
			if self.last_dir_x ~= 0 and self.input.x ~= self.last_dir_x then
				self.speed_x = math.max(self.speed_x - DECELERATION_X * dt, 0) -- Smoothly reduce speed
				if self.speed_x <= 0 then
					self.last_dir_x = self.input.x -- Change direction only when fully stopped
				end
			else
				-- Accelerate normally if not changing direction
				self.last_dir_x = self.input.x
				self.speed_x = math.min(self.speed_x + ACCELERATION_X * dt, MAX_SPEED_X)
			end
		end
	else
		self.speed_x = math.max(self.speed_x - DECELERATION_X * dt, 0)
	end

	-- Apply movement
	pos.x = pos.x + (self.last_dir_x * self.speed_x * dt) -- Moves in the last direction
	pos.y = pos.y + (self.input.y * self.speed_y * dt)

	go.set_position(pos)

	-- Reset input after applying movement
	self.input.x = 0
	self.input.y = 0
	self.moving = false

	if self.firing then
		msg.post("#satellite", "shoot")
	end
	self.firing = false  
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	end
	
	if vmath.length(self.input) > 0 then		
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("upgradeOccured") then
		apply_upgrade()
		msg.post("#satellite", "upgradeOccured2")
	end
end
