local upgrades = require("main._scripts.modules.upgrades_module")

function init(self)
	msg.post(".", "acquire_input_focus")

	gui.set_render_order(0)
	
	self.upgrade_buttons = {
		{ node = gui.get_node("player_missile"), upgrade_type = "missile", entity = "player" , bought = false},
		{ node = gui.get_node("player_spray"), upgrade_type = "spray", entity = "player" }
	}

	-- Set initial blend mode for already purchased upgrades
	for _, button in ipairs(self.upgrade_buttons) do
		if upgrades.is_upgrade_maxed(button.entity, button.upgrade_type) then
			gui.set_blend_mode(button.node, gui.BLEND_ADD) -- Keep it glowing
		end
	end
	
	self.player_currency_node = gui.get_node("scrap_amount_text")
	self.continue_button = gui.get_node("confirm")
	gui.set_enabled(self.continue_button, false)
end

function on_input(self, action_id, action)
	for _, button in ipairs(self.upgrade_buttons) do
		local is_hovering = gui.pick_node(button.node, action.x, action.y)

		-- If already purchased, force "ADD" blend mode
		if upgrades.is_upgrade_maxed(button.entity, button.upgrade_type) then
			gui.set_blend_mode(button.node, gui.BLEND_ADD)
		else
			-- Otherwise, use hover effect
			if is_hovering then
				gui.set_blend_mode(button.node, gui.BLEND_ADD)
			else
				gui.set_blend_mode(button.node, gui.BLEND_ALPHA)
			end
		end

		-- Handle clicking to purchase
		if is_hovering and action.pressed then
			local success = upgrades.buy_upgrade(button.entity, button.upgrade_type)
			if success then
				gui.set_blend_mode(button.node, gui.BLEND_ADD) -- Keep glowing
				gui.set_enabled(self.continue_button, true)
				local text = gui.get_node("scrap_amount_text")
				gui.set_text(text, tostring(99)) -- Update text as needed
				sound.play("/go#store_toggle", { delay = 0, gain = 0.5, pan = 0, speed = 1 })
			end
		end
	end


	local is_hovering_now = gui.pick_node(self.continue_button, action.x, action.y)

	-- If the hover state changes, update the blend mode
	if is_hovering_now and not self.is_hovering then
		gui.set_blend_mode(self.continue_button, gui.BLEND_ADD)
	elseif not is_hovering_now and self.is_hovering then
		gui.set_blend_mode(self.continue_button, gui.BLEND_ALPHA)
	end

	-- Update hover state
	self.is_hovering = is_hovering_now
	
	if action_id == hash("leftTrigger") and action.pressed then
		if gui.pick_node(self.continue_button, action.x, action.y) and gui.is_enabled(self.continue_button) then
			msg.post("0_game_managers:/game_manager_go#fader_gui", "blackFadeOut", { next_scene = "loadCombatZone" })
			sound.play("/go#ui_1", { delay = 0, gain = 0.5, pan = 0, speed = 2 })
		end
	end
end