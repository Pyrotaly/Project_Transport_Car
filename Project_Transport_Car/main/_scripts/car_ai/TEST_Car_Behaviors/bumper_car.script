local grid = require("main._scripts.modules.road_quadrants")

local function start_charge(self)
	local current_pos = go.get_position()
	local player_pos = go.get_position("/player/player")

	-- Calculate direction to where the player was and set velocity
	local direction = vmath.normalize(player_pos - current_pos)
	self.velocity = direction * self.speed

	-- Calculate the distance to the player
	local distance = vmath.length(player_pos - current_pos)

	-- Set minimum and maximum charge duration
	local min_duration = 0.25  -- Adjust as needed
	local max_duration = 1.3  -- Adjust as needed

	-- Calculate charge duration proportional to distance, then clamp it
	local raw_duration = distance / self.speed
	self.charge_duration = math.max(min_duration, math.min(raw_duration, max_duration)) + 0.25

	-- Debug output for charge duration
	print("Charge duration:", self.charge_duration)

	-- Start charging
	self.charging = true
	self.charge_timer = 0
end


local function stop_charge(self)
	self.charging = false
	self.velocity = vmath.vector3(0) -- Stop moving
end

function init(self)
	self.velocity = vmath.vector3(0) -- Initialize the velocity to zero
	self.speed = 2000 -- Set the charge speed (units per second)
	self.charging = false -- Whether the enemy is currently charging
	self.charge_timer = 0 -- Timer for the current charge
	self.cooldown_timer = 0 -- Timer for the cooldown between charges
	self.charge_cooldown = 2 -- Time between charges (in seconds)

	self.damage = 10 -- Damage dealt to the player on collision
end

function update(self, dt)
	if self.charging then
		-- Update position during charge
		local current_pos = go.get_position()
		local new_pos = current_pos + self.velocity * dt
		go.set_position(new_pos)

		-- Check if charge duration has ended
		self.charge_timer = self.charge_timer + dt
		if self.charge_timer >= self.charge_duration then
			stop_charge(self)
		end

		-- Check for collision with player
		local player_pos = go.get_position("/player/player")
		if vmath.length(player_pos - new_pos) < 20 then -- Adjust collision range
			msg.post("/player/player", "damage", { damage = self.damage })
			print("crahsed into player")
		end
	else
		-- Cooldown logic
		self.cooldown_timer = self.cooldown_timer + dt
		if self.cooldown_timer >= self.charge_cooldown then
			start_charge(self)
			self.cooldown_timer = 0 -- Reset cooldown timer
		end
	end
end
